#include "AsciiGenerator.h"

const std::map<char, std::array<std::string, AsciiGenerator::lineHeight>> AsciiGenerator::charToAscii =
{
	{ 'Q' , {
		"  ___  ",
		" / _ \\ ",
		"| (_) |",
		" \\__\\_\\",
		"       ",
	}},
	{ 'W' , {
		"__      __",
		"\\ \\    / /",
		" \\ \\/\\/ / ",
		"  \\_/\\_/  ",
		"          ",
	}},
	{ 'E' , {
		" ___ ",
		"| __|",
		"| _| ",
		"|___|",
		"     ",
	}},
	{ 'R' , {
		" ___ ",
		"| _ \\",
		"|   /",
		"|_|_\\",
		"     ",
	}},
	{ 'T' , {
		" _____ ",
		"|_   _|",
		"  | |  ",
		"  |_|  ",
		"       ",
	}},
	{ 'Y' , {
		"__   __",
		"\\ \\ / /",
		" \\ V / ",
		"  |_|  ",
		"       ",
	}},
	{ 'U' , {
		" _   _ ",
		"| | | |",
		"| |_| |",
		" \\___/ ",
		"       ",
	}},
	{ 'I' , {
		" ___ ",
		"|_ _|",
		" | | ",
		"|___|",
		"     ",
	}},
	{ 'O' , {
		"  ___  ",
		" / _ \\ ",
		"| (_) |",
		" \\___/ ",
		"       ",
	}},
	{ 'P' , {
		" ___ ",
		"| _ \\",
		"|  _/",
		"|_|  ",
		"     ",
	}},
	{ 'A' , {
		"   _   ",
		"  /_\\  ",
		" / _ \\ ",
		"/_/ \\_\\",
		"       ",
	}},
	{ 'S' , {
		" ___ ",
		"/ __|",
		"\\__ \\",
		"|___/",
		"     ",
	}},
	{ 'D' , {
		" ___  ",
		"|   \\ ",
		"| |) |",
		"|___/ ",
		"      ",
	}},
	{ 'F' , {
		" ___ ",
		"| __|",
		"| _| ",
		"|_|  ",
		"     ",
	}},
	{ 'G' , {
		"  ___ ",
		" / __|",
		"| (_ |",
		" \\___|",
		"      ",
	}},
	{ 'H' , {
		" _  _ ",
		"| || |",
		"| __ |",
		"|_||_|",
		"      ",
	}},
	{ 'J' , {
		"    _ ",
		" _ | |",
		"| || |",
		" \\__/ ",
		"      ",
	}},
	{ 'K' , {
		" _  __",
		"| |/ /",
		"| ' < ",
		"|_|\\_\\",
		"      ",
	}},
	{ 'L' , {
		" _    ",
		"| |   ",
		"| |__ ",
		"|____|",
		"      ",
	}},
	{ 'Z' , {
		" ____",
		"|_  /",
		" / / ",
		"/___|",
		"     ",
	}},
	{ 'X' , {
		"__  __",
		"\\ \\/ /",
		" >  < ",
		"/_/\\_\\",
		"      ",
	}},
	{ 'C' , {
		"  ___ ",
		" / __|",
		"| (__ ",
		" \\___|",
		"      ",
	}},
	{ 'V' , {
		"__   __",
		"\\ \\ / /",
		" \\ V / ",
		"  \\_/  ",
		"       ",
	}},
	{ 'B' , {
		" ___ ",
		"| _ )",
		"| _ \\",
		"|___/",
		"     ",
	}},
	{ 'N' , {
		" _  _ ",
		"| \\| |",
		"| .` |",
		"|_|\\_|",
		"      ",
	}},
	{ 'M' , {
		" __  __ ",
		"|  \\/  |",
		"| |\\/| |",
		"|_|  |_|",
		"        ",
	}},
	{ 'q' , {
		"      ",
		" __ _ ",
		"/ _` |",
		"\\__, |",
		"   |_|"
	}},
	{ 'w' , {
		"        ",
		"__ __ __",
		"\\ V  V /",
		" \\_/\\_/ ",
		"        "
	}},
	{ 'e' , {
		"     ",
		" ___ ",
		"/ -_)",
		"\\___|",
		"     "
	}},
	{ 'r' , {
		"     ",
		" _ _ ",
		"| '_|",
		"|_|  ",
		"     "
	}},
	{ 't' , {
		" _   ",
		"| |_ ",
		"|  _|",
		" \\__|",
		"     "
	}},
	{ 'y' , {
		"      ",
		" _  _ ",
		"| || |",
		" \\_, |",
		" |__/ ",
	}},
	{ 'u' , {
		"      ",
		" _  _ ",
		"| || |",
		" \\_,_|",
		"      "
	}},
	{ 'i' , {
		" _ ",
		"(_)",
		"| |",
		"|_|",
		"   "
	}},
	{ 'o' , {
		"     ",
		" ___ ",
		"/ _ \\",
		"\\___/",
		"     "
	}},
	{ 'p' , {
		"      ",
		" _ __ ",
		"| '_ \\",
		"| .__/",
		"|_|   "
	}},
	{ 'a' , {
		"      ",
		" __ _ ",
		"/ _` |",
		"\\__,_|",
		"      "
	}},
	{ 's' , {
		"    ",
		" ___",
		"(_-<",
		"/__/",
		"    "
	}},
	{ 'd' , {
		"    _ ",
		" __| |",
		"/ _` |",
		"\\__,_|",
		"      "
	}},
	{ 'f' , {
		"  __ ",
		" / _|",
		"|  _|",
		"|_|  ",
		"     "
	}},
	{ 'g' , {
		"      ",
		" __ _ ",
		"/ _` |",
		"\\__, |",
		"|___/ "
	}},
	{ 'h' , {
		" _    ",
		"| |_  ",
		"| ' \\ ",
		"|_||_|",
		"      "
	}},
	{ 'j' , {
		"   _ ",
		"  (_)",
		"  | |",
		" _/ |",
		"|__/ "
	}},
	{ 'k' , {
		" _   ",
		"| |__",
		"| / /",
		"|_\\_\\",
		"     "
	}},
	{ 'l' , {
		" _ ",
		"| |",
		"| |",
		"|_|",
		"   "
	}},
	{ 'z' , {
		"    ",
		" ___",
		"|_ /",
		"/__|",
		"    "
	}},
	{ 'x' , {
		"     ",
		"__ __",
		"\\ \\ /",
		"/_\\_\\",
		"     "
	}},
	{ 'c' , {
		"    ",
		" __ ",
		"/ _|",
		"\\__|",
		"    "
	}},
	{ 'v' , {
		"     ",
		"__ __",
		"\\ V /",
		" \\_/ ",
		"     "
	}},
	{ 'b' , {
		" _    ",
		"| |__ ",
		"| '_ \\",
		"|_.__/",
		"      "
	}},
	{ 'n' , {
		"      ",
		" _ _  ",
		"| ' \\ ",
		"|_||_|",
		"      "
	}},
	{ 'm' , {
		"       ",
		" _ __  ",
		"| '  \\ ",
		"|_|_|_|",
		"       "
	}},
	{ '0' , {
		"  __  ",
		" /  \\ ",
		"| () |",
		" \\__/ ",
		"      "
	}},
	{ '1' , {
		" _ ",
		"/ |",
		"| |",
		"|_|",
		"   "
	}},
	{ '2' , {
		" ___ ",
		"|_  )",
		" / / ",
		"/___|",
		"     "
	}},
	{ '3' , {
		" ____",
		"|__ /",
		" |_ \\",
		"|___/",
		"     "
	}},
	{ '4' , {
		" _ _  ",
		"| | | ",
		"|_  _|",
		"  |_| ",
		"      "
	}},
	{ '5' , {
		" ___ ",
		"| __|",
		"|__ \\",
		"|___/",
		"     "
	}},
	{ '6' , {
		"  __ ",
		" / / ",
		"/ _ \\",
		"\\___/",
		"     "
	}},
	{ '7' , {
		" ____ ",
		"|__  |",
		"  / / ",
		" /_/  ",
		"      "
	}},
	{ '8' , {
		" ___ ",
		"( _ )",
		"/ _ \\",
		"\\___/",
		"     "
	}},
	{ '9' , {
		" ___ ",
		"/ _ \\",
		"\\_, /",
		" /_/ ",
		"     "
	}},
	{ '-' , {
		"     ",
		" ___ ",
		"|___|",
		"     ",
		"     "
	}},
	{ '=' , {
		"     ",
		" ___ ",
		"|___|",
		"|___|",
		"     "
	}},
	{ '+' , {
		"   _   ",
		" _| |_ ",
		"|_   _|",
		"  |_|  ",
		"       "
	}},
	{ '_' , {
		"     ",
		"     ",
		"     ",
		" ___ ",
		"|___|"
	}},
	{ '[' , {
		" __ ",
		"| _|",
		"| | ",
		"| | ",
		"|__|"
	}},
	{ ']' , {
		" __ ",
		"|_ |",
		" | |",
		" | |",
		"|__|"
	}},
	{ ';' , {
		" _ ",
		"(_)",
		" _ ",
		"( )",
		"|/ "
	}},
	{ ':' , {
		" _ ",
		"(_)",
		" _ ",
		"(_)",
		"   "
	}},
	{ '\'' , {
		" _ ",
		"( )",
		"|/ ",
		"   ",
		"   "
	}},
	{ '@' , {
		"  ____  ",
		" / __ \\ ",
		"/ / _` |",
		"\\ \\__,_|",
		" \\____/ "
	}},
	{ '#' , {
		"   _ _   ",
		" _| | |_ ",
		"|_  .  _|",
		"|_     _|",
		"  |_|_|  "
	}},
	{ ',' , {
		"   ",
		"   ",
		" _ ",
		"( )",
		"|/ "
	}},
	{ '<' , {
		"  __",
		" / /",
		"< < ",
		" \\_\\",
		"    "
	}},
	{ '.' , {
		"   ",
		"   ",
		" _ ",
		"(_)",
		"   "
	}},
	{ '>' , {
		"__  ",
		"\\ \\ ",
		" > >",
		"/_/ ",
		"    "
	}},
	{ '\\' , {
		"__   ",
		"\\ \\  ",
		" \\ \\ ",
		"  \\_\\",
		"     "
	}},
	{ '|' , {
		" _ ",
		"| |",
		"| |",
		"| |",
		"|_|"
	}},
	{ '/' , {
		"   __",
		"  / /",
		" / / ",
		"/_/  ",
		"     "
	}},
	{ '?' , {
		" ___ ",
		"|__ \\",
		"  /_/",
		" (_) ",
		"     "
	}},
	{ '!' , {
		" _ ",
		"| |",
		"|_|",
		"(_)",
		"   "
	}},
	{ '"' , {
		" _ _ ",
		"( | )",
		" V V ",
		"     ",
		"     "
	}},
	{ '£' , {
		"   __  ",
		" _/ _\\ ",
		"|_ _|_ ",
		"(_,___|",
		"       "
	}},
	{ '$' , {
		"    ",
		" ||_",
		"(_-<",
		"/ _/",
		" || "
	}},
	{ '%' , {
		" _  __ ",
		"(_)/ / ",
		"  / /_ ",
		" /_/(_)",
		"       "
	}},
	{ '(' , {
		"  __",
		" / /",
		"| | ",
		"| | ",
		" \\_\\"
	}},
	{ ')' , {
		"__  ",
		"\\ \\ ",
		" | |",
		" | |",
		"/_/ "
	}},
};

std::vector<std::string> AsciiGenerator::Generate(const std::string& input, GeneratorSettings settings)
{
	std::vector<std::string> lines(lineHeight);

	// Assigning a color
	lines[0] += settings.color;

	for (int i = 0; i < lineHeight; i++)
	{
		for (char c : input)
		{
			if (charToAscii.count(c))
				lines[i] += charToAscii.at(c)[i] + " "; // Have to use .at() instead of [] because our map is const
			else
				lines[i] += "   ";
		}
	}

	// Resetting color to none
	lines[lineHeight - 1] += Colors::None;

	if (settings.autoPrint) PrintAscii(lines);

	return lines;
}

void AsciiGenerator::PrintAscii(const std::vector<std::string>& input)
{
	for (std::string line : input)
	{
		std::cout << line << std::endl;
	}
}
